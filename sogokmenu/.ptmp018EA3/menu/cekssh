#!/bin/bash
# Optimized SSH/VPN Connection Monitor
# https://t.me/bio_hazard89

# Color definitions
RED="\033[31m"
YELLOW="\033[33m"
NC='\e[0m'
YELL='\033[0;33m'
BRED='\033[1;31m'
GREEN='\033[0;32m'
ORANGE='\033[33m'
BGWHITE='\e[0;100;37m'

# Performance optimization: set max parallel processes
MAX_CORES=$(nproc)

# Auto-detect log file location
LOG="/var/log/auth.log"
[[ -e "/var/log/secure" ]] && LOG="/var/log/secure"

# Service detection functions using faster process checks
is_dropbear_active() { pgrep dropbear >/dev/null 2>&1; }
is_ssh_active() { pgrep sshd >/dev/null 2>&1; }
is_openvpn_tcp_active() { [[ -f "/etc/openvpn/server/openvpn-tcp.log" ]] && pgrep -f "openvpn.*tcp" >/dev/null 2>&1; }
is_openvpn_udp_active() { [[ -f "/etc/openvpn/server/openvpn-udp.log" ]] && pgrep -f "openvpn.*udp" >/dev/null 2>&1; }

# Optimized log parsing function - single regex for both timestamp formats
extract_user_info() {
    local line="$1" service="$2"
    local user ip
    
    case "$service" in
        "dropbear")
            if [[ "$line" =~ Password\ auth\ succeeded\ for\ \'([^\']*)\' ]]; then
                user="${BASH_REMATCH[1]}"
                [[ "$line" =~ from\ ([^:\ ]+) ]] && ip="${BASH_REMATCH[1]}"
            fi
            ;;
        "ssh")
            if [[ "$line" =~ Accepted\ password\ for\ ([^\ ]+) ]]; then
                user="${BASH_REMATCH[1]}"
                [[ "$line" =~ from\ ([^\ ]+) ]] && ip="${BASH_REMATCH[1]}"
            fi
            ;;
    esac
    
    [[ -n "$user" && -n "$ip" ]] && echo "$user|$ip"
}

clear

# SSH WebSocket Users (Dropbear) - Optimized with parallel processing
if is_dropbear_active; then
    echo -e "\e[33m──────────────────────────────────────────${NC}"
    echo -e "\E[40;1;37m            SSH WEBSOCKET USERS            \E[0m"
    echo -e "\e[33m──────────────────────────────────────────${NC}"
    echo -e "\E[40;1;37mPID  |  Username        |  IP Address     ${NC}";
    echo -e "\e[33m──────────────────────────────────────────${NC}"

    # Optimized: Process dropbear connections with parallel processing
    ps aux | awk '/[d]ropbear/ {print $2}' | while read PID; do
        if line=$(grep "dropbear\[$PID\].*Password auth succeeded" "$LOG" | head -1); then
            info=$(extract_user_info "$line" "dropbear")
            if [[ -n "$info" ]]; then
                user=$(echo "$info" | cut -d'|' -f1)
                ip=$(echo "$info" | cut -d'|' -f2)
                printf "%-6s %-19s %2s \n" "$PID" " $user" "$ip"
                echo -e "\e[33m──────────────────────────────────────────${NC}"
            fi
        fi
    done
fi

# SSH SSL & UDP Users - Optimized with parallel processing  
if is_ssh_active; then
    echo -e "\e[33m──────────────────────────────────────────${NC}"
    echo -e "\E[40;1;37m             SSH SSL & UDP USERS           \E[0m"
    echo -e "\e[33m──────────────────────────────────────────${NC}"
    echo -e "\E[40;1;37mPID  |  Username        |  IP Address     ${NC}";
    echo -e "\e[33m──────────────────────────────────────────${NC}"

    # Optimized: Process SSH connections with parallel processing
    ps aux | awk '/\[priv\]/ {print $2}' | sort -n | while read PID; do
        if line=$(grep "sshd\[$PID\].*Accepted password for" "$LOG" | head -1); then
            info=$(extract_user_info "$line" "ssh")
            if [[ -n "$info" ]]; then
                user=$(echo "$info" | cut -d'|' -f1)
                ip=$(echo "$info" | cut -d'|' -f2)
                printf "%-6s %-19s %2s \n" "$PID" " $user" "$ip"
                echo -e "\e[33m──────────────────────────────────────────${NC}"
            fi
        fi
    done
fi

# OpenVPN TCP Users - Optimized with direct processing
if is_openvpn_tcp_active; then
    echo -e "\e[33m──────────────────────────────────────────${NC}"
    echo -e "\E[40;1;37m             OPENVPN TCP USERS             \E[0m"
    echo -e "\e[33m──────────────────────────────────────────${NC}"
    echo -e "\E[40;1;37mID   |  Username        |  IP Address     ${NC}";
    echo -e "\e[33m──────────────────────────────────────────${NC}"
    # Direct processing without temporary files
    grep -w "^CLIENT_LIST" /etc/openvpn/server/openvpn-tcp.log 2>/dev/null | \
    cut -d ',' -f 2,3,8 | sed -e 's/,/      /g'
    echo -e "\e[33m──────────────────────────────────────────${NC}"
fi

# OpenVPN UDP Users - Optimized with direct processing
if is_openvpn_udp_active; then
    echo -e "\e[33m──────────────────────────────────────────${NC}"
    echo -e "\E[40;1;37m             OPENVPN UDP USERS             \E[0m"
    echo -e "\e[33m──────────────────────────────────────────${NC}"
    echo -e "\E[40;1;37mID   |  Username        |  IP Address     ${NC}";
    echo -e "\e[33m──────────────────────────────────────────${NC}"
    # Direct processing without temporary files
    grep -w "^CLIENT_LIST" /etc/openvpn/server/openvpn-udp.log 2>/dev/null | \
    cut -d ',' -f 2,3,8 | sed -e 's/,/      /g'
    echo -e "\e[33m──────────────────────────────────────────${NC}"
fi

# Display message if no services are active
if ! is_dropbear_active && ! is_ssh_active && ! is_openvpn_tcp_active && ! is_openvpn_udp_active; then
    echo -e "\e[33m──────────────────────────────────────────${NC}"
    echo -e "\E[40;1;33m           NO ACTIVE SERVICES             \E[0m"
    echo -e "\e[33m──────────────────────────────────────────${NC}"
fi
